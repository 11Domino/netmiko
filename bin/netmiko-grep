#!/usr/bin/env python
"""
Create grep like remote behavior on show run or command output

ToDo:
1. Auto-build 'all' group
2. No support for grep options
3. Unit tests
4. Test on larger set of devices >50
"""

from __future__ import print_function
from __future__ import unicode_literals

import argparse
import sys
import io
import subprocess
import threading
from Queue import Queue
from datetime import datetime

from netmiko import ConnectHandler
from pprint import pprint as pp

GREP = '/bin/grep'

# Dictionary mapping 'show run' for vendors with different command
SHOW_RUN_MAPPER = {
    'juniper': 'show configuration',
    'juniper_junos': 'show configuration',
}


def grepx(files, pattern, grep_options, use_colors=True):
    """Call system grep"""
    if not isinstance(files, (list, tuple)):
        files = [files]
    if use_colors:
        grep_options += ['--color=auto']
    grep_list = [GREP] + grep_options + [pattern] + files
    proc = subprocess.Popen(grep_list, shell=False)
    proc.communicate()
    return ''


def load_devices(yaml_file='.netmiko.cfg'):
    """Parses .netmiko.cfg file, returning its contents as a dict."""
    try:
        import yaml
    except ImportError:
        sys.exit("Unable to import yaml module.")
    try:
        with io.open(yaml_file, encoding='utf-8') as fname:
            return yaml.load(fname)
    except IOError:
        sys.exit("Unable to open YAML file: {0}".format(yaml_file))


def obtain_file_name(device_name):
    """Create file name based on device_name."""
    return "/tmp/{0}.txt".format(device_name)


def write_tmp_file(device_name, output):
    file_name = obtain_file_name(device_name)
    with open(file_name, "w") as f:
        f.write(output)
    return file_name


def ssh_conn(device_name, a_device, cli_command, output_q):
    net_connect = ConnectHandler(**a_device)
    net_connect.enable()
    output = net_connect.send_command_expect(cli_command)
    output_q.put({device_name: output})


def main():
    start_time = datetime.now()
    parser = argparse.ArgumentParser(description="Experimental netmiko-grep")
    parser.add_argument("pattern", help="Pattern to search for", action="store", type=str)
    parser.add_argument("device_id", help="Device to connect to", action="store", type=str)
    parser.add_argument("--cmd", help="Remote command to execute",
                        action="store", default=None, type=str)
    parser.add_argument("--username", help="Username", action="store", type=str)
    parser.add_argument("--password", help="Password", action="store", type=str)
    parser.add_argument("--use_cache", help="Use cached files", action="store_true")
    cli_args = parser.parse_args()
    cli_command = cli_args.cmd
    cmd_arg = False
    if cli_command:
        cmd_arg = True
    device_id = cli_args.device_id.strip()
    pattern = cli_args.pattern
    use_cached_files = cli_args.use_cache

    output_q = Queue()
    my_devices = load_devices()
    try:
        device = my_devices[device_id]
        device_group = {}
        if isinstance(device, list):
            for tmp_device in device:
                device_group[tmp_device] = my_devices[tmp_device]
        else:
            device_group[device_id] = device
    except KeyError:
        print("Error reading from .netmiko.cfg file."
              " Device or group not found: {0}".format(device_id))
        sys.exit(1)

    # Retrieve output from devices
    my_files = []
    if not use_cached_files:
        for device_name, a_device in device_group.items():
            if not cmd_arg:
                cli_command = SHOW_RUN_MAPPER.get(a_device['device_type'], 'show run')
            my_thread = threading.Thread(target=ssh_conn, args=(device_name, a_device,
                                                                cli_command, output_q))
            my_thread.start()

        # Make sure all threads have finished
        main_thread = threading.currentThread()
        for some_thread in threading.enumerate():
            if some_thread != main_thread:
                some_thread.join()

        # Write files
        while not output_q.empty():
            my_dict = output_q.get()
            for device_name, output in my_dict.iteritems():
                file_name = write_tmp_file(device_name, output)
                my_files.append(file_name)

    else:
        for device_name in device_group:
            file_name = obtain_file_name(device_name)
            my_files.append(file_name)

    grep_options = []
    grepx(my_files, pattern, grep_options)
    print("Total time: {0}".format(datetime.now() - start_time))
    return 0

if __name__ == "__main__":
    sys.exit(main())
